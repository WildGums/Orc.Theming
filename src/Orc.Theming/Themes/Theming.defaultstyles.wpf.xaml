<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:catel="http://schemas.catelproject.com">

    <ResourceDictionary.MergedDictionaries>
        <!-- All wpf controls restyled with accent colors -->
        <ResourceDictionary Source="/Orc.Theming;component/Themes/Controls.explicit.wpf.progressbar.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/Themes/Controls.implicit.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.catel.infobarmessagecontrol.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.focusvisual.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.button.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.calendar.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.checkbox.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.combobox.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.datagrid.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.gridsplitter.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.groupbox.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.itemscontrol.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.label.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.listbox.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.listview.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.menuitem.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.passwordbox.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.progressbar.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.radiobutton.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.repeatbutton.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.richtextbox.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.slider.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.tabcontrol.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.textblock.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.textbox.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.togglebutton.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.toolbar.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.tooltip.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.treeview.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.window.xaml" />
        <ResourceDictionary Source="/Orc.Theming;component/themes/Controls.implicit.wpf.scrollbar.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Converters -->
    <catel:BooleanToGrayscaleConverter x:Key="BooleanToGrayscaleConverter" />
    <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
    <catel:GetFirstValidationErrorConverter x:Key="GetFirstValidationErrorConverter" />

    <Style x:Key="{x:Type TextBoxBase}"
           BasedOn="{StaticResource Orc.Styles.TextBoxBase}" />
    <Style x:Key="{x:Type ButtonBase}"
           BasedOn="{StaticResource Orc.Styles.ButtonBase}" />
    <Style x:Key="{x:Type Control}"
           BasedOn="{StaticResource Orc.Styles.Control}" />

    <!-- Buttons -->
    <Style x:Key="DefaultButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource Orc.Styles.Button}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Button}" />
        <Setter Property="UseLayoutRounding"
                Value="True" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1"
                                BorderBrush="Red"
                                Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Grayscale effect when disabled -->
        <!--<Setter Property="Effect">
            <Setter.Value>
                <effects:GrayscaleEffect DesaturationFactor="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, Converter={catel:BooleanToGrayscaleConverter}}" />
            </Setter.Value>
        </Setter>-->
    </Style>

    <!-- Calendar -->
    <Style x:Key="DefaultCalendarStyle"
           TargetType="{x:Type Calendar}"
           BasedOn="{StaticResource Orc.Styles.Calendar}" />

    <!-- CheckBox -->
    <Style x:Key="DefaultCheckBoxStyle"
           TargetType="{x:Type CheckBox}"
           BasedOn="{StaticResource Orc.Styles.CheckBox}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.CheckBox}" />
        <Setter Property="Width"
                Value="Auto" />
        <Setter Property="HorizontalAlignment"
                Value="Left" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1"
                                BorderBrush="Red"
                                Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError"
                     Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ComboBox -->
    <Style x:Key="DefaultComboBoxStyle"
           TargetType="{x:Type ComboBox}"
           BasedOn="{StaticResource Orc.Styles.ComboBox}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Default}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="MinWidth"
                Value="120" />
        <Setter Property="Padding"
                Value="{DynamicResource Padding.Combobox}" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1"
                                BorderBrush="Red"
                                Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError"
                     Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ComboBox -->
    <Style x:Key="DefaultDataGridStyle"
           TargetType="{x:Type DataGrid}"
           BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- GroupBox -->
    <Style x:Key="DefaultGroupBoxStyle"
           TargetType="{x:Type GroupBox}"
           BasedOn="{StaticResource Orc.Styles.GroupBox}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.GroupBox}" />
    </Style>

    <!-- Label -->
    <Style x:Key="DefaultLabelStyle"
           TargetType="{x:Type Label}"
           BasedOn="{StaticResource Orc.Styles.Label}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Label}" />
        <Setter Property="Padding"
                Value="{DynamicResource Padding.Label}" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
    </Style>

    <!-- ListBox -->
    <Style x:Key="DefaultListBoxStyle"
           TargetType="{x:Type ListBox}"
           BasedOn="{StaticResource Orc.Styles.ListBox}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- ItemsControl -->
    <!-- DON'T STYLE THE ITEMSCONTROL, IT HS TOO MUCH IMPACT ON OTHER CONTROLS, STYLE CONTAINERS INSTEAD -->

    <!-- ListBox item -->
    <Style x:Key="DefaultListBoxItemStyle"
           TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource Orc.Styles.ListBoxItem}">
    </Style>

    <!-- ListView -->
    <Style x:Key="DefaultListViewStyle"
           TargetType="{x:Type ListView}"
           BasedOn="{StaticResource Orc.Styles.ListView}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- ListView item -->
    <Style x:Key="DefaultListViewItemStyle"
           TargetType="{x:Type ListViewItem}"
           BasedOn="{StaticResource Orc.Styles.ListViewItem}">
    </Style>

    <!-- Menu item -->
    <Style x:Key="DefaultMenuItemStyle"
           TargetType="{x:Type MenuItem}"
           BasedOn="{StaticResource Orc.Styles.MenuItem}">
    </Style>

    <!-- PasswordBox -->
    <Style x:Key="DefaultPasswordBoxStyle"
           TargetType="{x:Type PasswordBox}"
           BasedOn="{StaticResource Orc.Styles.PasswordBox}">
        <Setter Property="Padding"
                Value="{DynamicResource Padding.TextBox}" />
        <Setter Property="Margin"
                Value="{DynamicResource Margin.TextBox}" />
        <Setter Property="MinHeight"
                Value="{DynamicResource Size.MinHeight}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1"
                                BorderBrush="Red"
                                Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError"
                     Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Progress bar -->
    <Style x:Key="DefaultProgressBarStyle"
           TargetType="{x:Type ProgressBar}"
           BasedOn="{StaticResource Orc.Styles.ProgressBar}">
        <Setter Property="MinHeight"
                Value="{DynamicResource Size.MinHeight}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- RadioButton -->
    <Style x:Key="DefaultRadioButtonStyle"
           TargetType="{x:Type RadioButton}"
           BasedOn="{StaticResource Orc.Styles.RadioButton}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.RadioButton}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1"
                                BorderBrush="Red"
                                Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError"
                     Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- RepeatButton -->
    <Style x:Key="DefaultRepeatButtonStyle"
           TargetType="{x:Type RepeatButton}"
           BasedOn="{StaticResource Orc.Styles.RepeatButton}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Button}" />
        <Setter Property="UseLayoutRounding"
                Value="True" />
    </Style>

    <!-- RichTextBox -->
    <Style x:Key="DefaultRichTextBoxStyle"
           TargetType="{x:Type RichTextBox}"
           BasedOn="{StaticResource Orc.Styles.RichTextBox}">
        <Setter Property="MinHeight"
                Value="{DynamicResource Size.MinHeight}" />
        <Setter Property="Padding"
                Value="{DynamicResource Padding.TextBox}" />
        <Setter Property="Margin"
                Value="{DynamicResource Margin.TextBox}" />
        <!--<Setter Property="VerticalContentAlignment" Value="Center" />-->
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
    </Style>

    <!-- Slider -->
    <Style x:Key="DefaultSliderStyle"
           TargetType="{x:Type Slider}"
           BasedOn="{StaticResource Orc.Styles.Slider}">
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Slider}" />
    </Style>

    <!-- TabControl -->
    <Style x:Key="DefaultTabControlStyle"
           TargetType="{x:Type TabControl}"
           BasedOn="{StaticResource Orc.Styles.TabControl}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- TabItem -->
    <Style x:Key="DefaultTabItemStyle"
           TargetType="{x:Type TabItem}"
           BasedOn="{StaticResource Orc.Styles.TabItem}">
    </Style>

    <!-- TextBlock -->
    <Style x:Key="DefaultTextBlockStyle"
           TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource Orc.Styles.TextBlock}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.TextBlock}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
    </Style>

    <!-- TextBox -->
    <Style x:Key="DefaultTextBoxStyle"
           TargetType="{x:Type TextBox}"
           BasedOn="{StaticResource Orc.Styles.TextBox}">

        <Setter Property="MinHeight"
                Value="{DynamicResource Size.MinHeight}" />
        <Setter Property="Padding"
                Value="{DynamicResource Padding.TextBox}" />
        <Setter Property="Margin"
                Value="{DynamicResource Margin.TextBox}" />
        <!--<Setter Property="VerticalContentAlignment" Value="Center" />-->
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1"
                                BorderBrush="Red"
                                Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError"
                     Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ToggleButton -->
    <Style x:Key="DefaultToggleButtonStyle"
           TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource Orc.Styles.ToggleButton}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Button}" />
    </Style>

    <!-- ToolBar -->
    <Style x:Key="DefaultToolBarTrayStyle"
           TargetType="{x:Type ToolBarTray}"
           BasedOn="{StaticResource Orc.Styles.ToolBarTray}">
        <!--<Setter Property="Margin" Value="{DynamicResource Margin.Default}" />-->
    </Style>

    <Style x:Key="DefaultToolBarStyle"
           TargetType="{x:Type ToolBar}"
           BasedOn="{StaticResource Orc.Styles.ToolBar}">
        <!--<Setter Property="Margin" Value="{DynamicResource Margin.Default}" />-->
    </Style>

    <!-- ToolTip -->
    <Style x:Key="DefaultToolTipStyle"
           TargetType="{x:Type ToolTip}"
           BasedOn="{StaticResource Orc.Styles.ToolTip}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- TreeView -->
    <Style x:Key="DefaultTreeViewStyle"
           TargetType="{x:Type TreeView}"
           BasedOn="{StaticResource Orc.Styles.TreeView}">
        <Setter Property="Margin"
                Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- Window -->
    <Style x:Key="DefaultWindowStyle"
           TargetType="{x:Type Window}"
           BasedOn="{StaticResource Orc.Styles.Window}">
    </Style>

</ResourceDictionary>
<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:controls="clr-namespace:Orc.Theming.Controls" xmlns:converters="clr-namespace:Orc.Theming.Converters" xmlns:catel="http://schemas.catelproject.com" xmlns:b="http://schemas.microsoft.com/xaml/behaviors" xmlns:orctheming="clr-namespace:Orc.Theming" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <converters:ProgressBarSizeToTrackRadiusConverter x:Key="ProgressBarSizeToTrackRadiusConverter" />
  <converters:ProgressBarTrackRadiusToTrackOffsetConverter x:Key="ProgressBarTrackRadiusToTrackOffsetConverter" />
  <converters:ProgressBarTrackToIndicatorSizeConverter x:Key="ProgressBarTrackToIndicatorSizeConverter" />
  <converters:ProgressBarTrackToIndicatorStartPointConverter x:Key="ProgressBarTrackToIndicatorStartPointConverter" />
  <converters:ThicknessToDoubleConverter x:Key="ThicknessToDoubleConverter" />
  <converters:ProgressBarValueToArcPointConverter x:Key="ProgressBarValueToArcPointConverter" />
  <converters:ProgressBarValueToArcTypeConverter x:Key="ProgressBarValueToArcTypeConverter" />
  <Style x:Key="Orc.Styles.GridSplitter" TargetType="{x:Type GridSplitter}" />
  <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ScrollViewer">
          <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <DockPanel Margin="{TemplateBinding Padding}">
              <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="false">
                <GridViewHeaderRowPresenter Margin="2,0,2,0" Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding RelativeSource={RelativeSource Self}, Path=Columns, Converter={catel:CollectionToCollapsingVisibilityConverter}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </ScrollViewer>
              <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local" CanContentScroll="True" CanHorizontallyScroll="False" CanVerticallyScroll="False" />
            </DockPanel>
            <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{TemplateBinding HorizontalOffset}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
            <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{TemplateBinding VerticalOffset}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Geometry x:Key="Checkmark">
        M1.0E-41,4.2 L0,2.1 2.5,4.5 6.7,4.4E-47 6.7,2.3 2.5,6.7 z
    </Geometry>
  <Geometry x:Key="RightArrow">
        M 0,0 L 4,3.5 L 0,7 Z
    </Geometry>
  <Geometry x:Key="MenuScrollDownArrowGeometry">
        M-0.7,5.2 L-2.2,6.7 3.6,12.6 9.5,6.7 8,5.2 3.6,9.6 z
    </Geometry>
  <Geometry x:Key="MenuScrollUpArrowGeometry">
        M-2.2,10.9 L-0.7,12.4 3.7,8 8,12.4 9.5,10.9 3.7,5 z
    </Geometry>
  <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
  <Style x:Key="Orc.Styles.Slider.RepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="Transparent" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="Orc.Styles.TextBox.Selection.Highlight" Color="#0078D7" />
  <SolidColorBrush x:Key="Orc.Styles.TextBox.Selection.HighlightInactive" Color="#B9B9B9" />
  <Style x:Key="DataWindowButtonContainerStyle" TargetType="{x:Type WrapPanel}">
    <Setter Property="Margin" Value="6" />
    <Setter Property="HorizontalAlignment" Value="Right" />
  </Style>
  <catel:BooleanToGrayscaleConverter x:Key="BooleanToGrayscaleConverter" />
  <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
  <catel:GetFirstValidationErrorConverter x:Key="GetFirstValidationErrorConverter" />
  <sys:Double x:Key="Size.MinHeight">28</sys:Double>
  <sys:Double x:Key="Size.Image.VerySmall">24</sys:Double>
  <sys:Double x:Key="Size.Image.Small">34</sys:Double>
  <sys:Double x:Key="Size.Image.Medium">46</sys:Double>
  <sys:Double x:Key="Size.Image.Large">86</sys:Double>
  <sys:Double x:Key="Size.Image.VeryLarge">116</sys:Double>
  <sys:Double x:Key="MarginSize.Default">8</sys:Double>
  <sys:Double x:Key="MarginSize.Button.X">8</sys:Double>
  <sys:Double x:Key="MarginSize.Button.Y">8</sys:Double>
  <sys:Double x:Key="MarginSize.CheckBox.X">10</sys:Double>
  <sys:Double x:Key="MarginSize.CheckBox.Y">6</sys:Double>
  <sys:Double x:Key="MarginSize.GroupBox.X">6</sys:Double>
  <sys:Double x:Key="MarginSize.GroupBox.Y">0</sys:Double>
  <sys:Double x:Key="MarginSize.Label.X">6</sys:Double>
  <sys:Double x:Key="MarginSize.Label.Y">8</sys:Double>
  <sys:Double x:Key="MarginSize.RadioButton.X">10</sys:Double>
  <sys:Double x:Key="MarginSize.RadioButton.Y">4</sys:Double>
  <sys:Double x:Key="MarginSize.Slider.X">8</sys:Double>
  <sys:Double x:Key="MarginSize.Slider.Y">6</sys:Double>
  <sys:Double x:Key="MarginSize.TextBlock.X">4</sys:Double>
  <sys:Double x:Key="MarginSize.TextBlock.Y">4</sys:Double>
  <sys:Double x:Key="MarginSize.TextBox.X">8</sys:Double>
  <sys:Double x:Key="MarginSize.TextBox.Y">8</sys:Double>
  <sys:Double x:Key="PaddingSize.Default">NaN</sys:Double>
  <sys:Double x:Key="PaddingSize.Label.X">-1</sys:Double>
  <sys:Double x:Key="PaddingSize.Label.Y">4</sys:Double>
  <sys:Double x:Key="PaddingSize.TextBox.X">8</sys:Double>
  <sys:Double x:Key="PaddingSize.TextBox.Y">8</sys:Double>
  <sys:Double x:Key="Size.Height">27</sys:Double>
  <sys:Double x:Key="PaddingSize.Combobox.X">2</sys:Double>
  <sys:Double x:Key="PaddingSize.Combobox.Y">3</sys:Double>
  <Style x:Key="Orc.Styles.ProgressBar.Circular" TargetType="{x:Type ProgressBar}">
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.AccentColor}" />
    <Setter Property="BorderThickness" Value="5" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <ControlTemplate.Resources>
            <Storyboard SpeedRatio="1" RepeatBehavior="Forever" x:Key="IndicatorAnimationStoryBoard">
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="IndicatorRotateTransform" Storyboard.TargetProperty="Angle">
                <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                <LinearDoubleKeyFrame KeyTime="0:0:3.000" Value="360" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid x:Name="TemplateRoot">
            <Grid Background="{DynamicResource TransparentWhiteBrush}" ClipToBounds="True" x:Name="PART_Indicator" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinWidth="{TemplateBinding Width}" Width="{TemplateBinding Width}">
              <Canvas Opacity="1.0" Width="{TemplateBinding Width}">
                <Path Stroke="{TemplateBinding Foreground}" StrokeThickness="{TemplateBinding BorderThickness, Converter={converters:ThicknessToDoubleConverter}}" x:Name="IndicatorPath">
                  <Path.RenderTransform>
                    <TransformGroup>
                      <RotateTransform x:Name="IndicatorRotateTransform">
                        <RotateTransform.CenterX>
                          <MultiBinding Converter="{StaticResource ProgressBarTrackRadiusToTrackOffsetConverter}" ConverterParameter="RadiusX">
                            <Binding ElementName="TrackPath" Path="StrokeThickness" />
                            <Binding ElementName="TrackEllipse" />
                          </MultiBinding>
                        </RotateTransform.CenterX>
                        <RotateTransform.CenterY>
                          <MultiBinding Converter="{StaticResource ProgressBarTrackRadiusToTrackOffsetConverter}" ConverterParameter="RadiusY">
                            <Binding ElementName="TrackPath" Path="StrokeThickness" />
                            <Binding ElementName="TrackEllipse" />
                          </MultiBinding>
                        </RotateTransform.CenterY>
                      </RotateTransform>
                    </TransformGroup>
                  </Path.RenderTransform>
                  <Path.Data>
                    <PathGeometry>
                      <PathGeometry.Transform>
                        <TranslateTransform X="{Binding ElementName=TrackPath, Path=StrokeThickness}">
                          <TranslateTransform.Y>
                            <MultiBinding Converter="{StaticResource ProgressBarTrackRadiusToTrackOffsetConverter}" ConverterParameter="RadiusY">
                              <Binding ElementName="TrackPath" Path="StrokeThickness" />
                              <Binding ElementName="TrackEllipse" />
                            </MultiBinding>
                          </TranslateTransform.Y>
                        </TranslateTransform>
                      </PathGeometry.Transform>
                      <PathGeometry.Figures>
                        <PathFigureCollection>
                          <PathFigure StartPoint="{Binding ElementName=TrackEllipse, Path=., Converter={StaticResource ProgressBarTrackToIndicatorStartPointConverter}}" x:Name="IndicatorArcPathFigure">
                            <PathFigure.Segments>
                              <PathSegmentCollection>
                                <ArcSegment x:Name="IndicatorArc" Size="{Binding ElementName=TrackEllipse, Path=., Converter={StaticResource ProgressBarTrackToIndicatorSizeConverter}}" SweepDirection="Clockwise">
                                  <ArcSegment.IsLargeArc>
                                    <MultiBinding Converter="{StaticResource ProgressBarValueToArcTypeConverter}">
                                      <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                      <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                      <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                    </MultiBinding>
                                  </ArcSegment.IsLargeArc>
                                  <ArcSegment.Point>
                                    <MultiBinding Converter="{StaticResource ProgressBarValueToArcPointConverter}">
                                      <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                      <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                      <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                      <Binding ElementName="TrackEllipse" Path="RadiusX" />
                                      <Binding ElementName="TrackEllipse" Path="RadiusY" />
                                    </MultiBinding>
                                  </ArcSegment.Point>
                                </ArcSegment>
                              </PathSegmentCollection>
                            </PathFigure.Segments>
                          </PathFigure>
                        </PathFigureCollection>
                      </PathGeometry.Figures>
                    </PathGeometry>
                  </Path.Data>
                </Path>
              </Canvas>
              <Canvas x:Name="PART_Track" Opacity="0.3" Width="{TemplateBinding Width}">
                <Path Stroke="{TemplateBinding Foreground}" StrokeThickness="{TemplateBinding BorderThickness, Converter={converters:ThicknessToDoubleConverter}}" x:Name="TrackPath">
                  <Path.Data>
                    <EllipseGeometry x:Name="TrackEllipse">
                      <EllipseGeometry.RadiusX>
                        <MultiBinding Converter="{StaticResource ProgressBarSizeToTrackRadiusConverter}">
                          <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="BorderThickness" />
                          <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" />
                          <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" />
                        </MultiBinding>
                      </EllipseGeometry.RadiusX>
                      <EllipseGeometry.RadiusY>
                        <MultiBinding Converter="{StaticResource ProgressBarSizeToTrackRadiusConverter}">
                          <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="BorderThickness" />
                          <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width" />
                          <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height" />
                        </MultiBinding>
                      </EllipseGeometry.RadiusY>
                      <EllipseGeometry.Transform>
                        <TranslateTransform>
                          <TranslateTransform.X>
                            <MultiBinding Converter="{StaticResource ProgressBarTrackRadiusToTrackOffsetConverter}" ConverterParameter="RadiusX">
                              <Binding ElementName="TrackPath" Path="StrokeThickness" />
                              <Binding ElementName="TrackEllipse" />
                            </MultiBinding>
                          </TranslateTransform.X>
                          <TranslateTransform.Y>
                            <MultiBinding Converter="{StaticResource ProgressBarTrackRadiusToTrackOffsetConverter}" ConverterParameter="RadiusY">
                              <Binding ElementName="TrackPath" Path="StrokeThickness" />
                              <Binding ElementName="TrackEllipse" />
                            </MultiBinding>
                          </TranslateTransform.Y>
                        </TranslateTransform>
                      </EllipseGeometry.Transform>
                    </EllipseGeometry>
                  </Path.Data>
                </Path>
              </Canvas>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Visibility" Value="Visible" />
                <Condition Property="IsIndeterminate" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource IndicatorAnimationStoryBoard}" x:Name="IndicatorAnimationStoryBoard" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.ExitActions>
                <RemoveStoryboard BeginStoryboardName="IndicatorAnimationStoryBoard" />
              </MultiTrigger.ExitActions>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.InfoBarMessageControl" TargetType="{x:Type catel:InfoBarMessageControl}">
    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type catel:InfoBarMessageControl}">
          <ControlTemplate.Resources>
            <!-- Brushes -->
            <SolidColorBrush x:Key="InfoBarMessageBackgroundBrush" Color="#FFC32D" />
            <SolidColorBrush x:Key="InfoBarMessageSeparatorBrush" Color="Black" />
            <SolidColorBrush x:Key="InfoBarMessageErrorTextBackgroundBrush" Color="#FFC32D" />
            <SolidColorBrush x:Key="InfoBarMessageErrorTextColorBrush" Color="Red" />
            <SolidColorBrush x:Key="InfoBarMessageWarningTextColorBrush" Color="Orange" />
          </ControlTemplate.Resources>
          <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <!-- Actual content -->
              <ContentPresenter Grid.Row="1" x:Name="actualContent" />
              <!-- Message bar, by default in-line (Grid.Row = 0) -->
              <StackPanel Grid.Row="0" x:Name="PART_MessageBar" Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type catel:InfoBarMessageControl}}, Path=MessageCount, Converter={catel:CollectionToCollapsingVisibilityConverter}}" Width="{Binding ElementName=actualContent, Path=ActualWidth}">
                <!-- Internal StackPanel, otherwise the whole control will have the background brush -->
                <StackPanel Background="{DynamicResource InfoBarMessageBackgroundBrush}">
                  <!-- Actual text -->
                  <TextBlock Padding="4,2,4,2" Foreground="Black" Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type catel:InfoBarMessageControl}}, Path=InfoMessage}" />
                  <!-- Line -->
                  <Line Name="infoBarSeparator" Margin="0" Stroke="{DynamicResource InfoBarMessageSeparatorBrush}" X1="0" X2="1" Stretch="UniformToFill" />
                </StackPanel>
              </StackPanel>
            </Grid>
            <!-- Popup -->
            <Popup IsOpen="{Binding ElementName=PART_MessageBar, Path=IsMouseOver, Mode=OneWay}" PlacementTarget="{Binding ElementName=infoBarSeparator}" Placement="Bottom" AllowsTransparency="True" PopupAnimation="Fade">
              <b:Interaction.Behaviors>
                <orctheming:CorrectPopupWidthBehavior ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
              </b:Interaction.Behaviors>
              <Grid Background="{DynamicResource InfoBarMessageErrorTextBackgroundBrush}" DataContext="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type catel:InfoBarMessageControl}}}">
                <!-- Column definitions -->
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <!-- Row definitions -->
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <!-- List of errors -->
                <ItemsControl Grid.Row="0" ItemsSource="{Binding ErrorMessageCollection}" Height="Auto" VerticalAlignment="Top" Visibility="{Binding ErrorMessageCollection.Count, Converter={catel:CollectionToCollapsingVisibilityConverter}}">
                  <ItemsControl.ItemTemplate>
                    <DataTemplate>
                      <Grid>
                        <!-- Column definitions -->
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!-- Content -->
                        <Image Grid.Column="0" Source="/Catel.MVVM;component/Resources/Images/Error.png" Margin="2,2,4,2" Width="16" Height="16" />
                        <TextBlock Grid.Column="1" Foreground="{DynamicResource InfoBarMessageErrorTextColorBrush}" Text="{Binding}" TextWrapping="Wrap" />
                      </Grid>
                    </DataTemplate>
                  </ItemsControl.ItemTemplate>
                </ItemsControl>
                <!-- List of warnings -->
                <ItemsControl Grid.Row="1" ItemsSource="{Binding WarningMessageCollection}" Height="Auto" VerticalAlignment="Top" Visibility="{Binding WarningMessageCollection.Count, Converter={catel:CollectionToCollapsingVisibilityConverter}}">
                  <ItemsControl.ItemTemplate>
                    <DataTemplate>
                      <Grid>
                        <!-- Column definitions -->
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!-- Content -->
                        <Image Grid.Column="0" Source="/Catel.MVVM;component/Resources/Images/Warning.png" Margin="2,2,4,2" Width="16" Height="16" />
                        <TextBlock Grid.Column="1" Foreground="{DynamicResource InfoBarMessageWarningTextColorBrush}" Text="{Binding}" TextWrapping="Wrap" />
                      </Grid>
                    </DataTemplate>
                  </ItemsControl.ItemTemplate>
                </ItemsControl>
                <!-- Line -->
                <Line Grid.Row="2" Margin="0" Stroke="{DynamicResource InfoBarMessageSeparatorBrush}" X1="0" X2="1" Stretch="UniformToFill" />
              </Grid>
            </Popup>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.Calendar" TargetType="{x:Type Calendar}">
    <Style.Resources>
      <!--CalendarItem-->
      <Style x:Key="CalendarItemStyle" TargetType="CalendarItem">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="CalendarItem">
              <ControlTemplate.Resources>
                <!-- Start: Data template for header button -->
                <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                  <TextBlock FontWeight="Bold" FontFamily="Verdana" FontSize="9.5" Foreground="{DynamicResource Orc.Brushes.Control.Default.Foreground}" HorizontalAlignment="Center" Text="{Binding}" Margin="0,6,0,6" VerticalAlignment="Center" />
                </DataTemplate>
                <!-- End: Data template for header button -->
              </ControlTemplate.Resources>
              <Grid Name="PART_Root">
                <Grid.Resources>
                  <SolidColorBrush x:Key="Õ" Color="{DynamicResource Orc.Colors.Control.Disabled.Border}" />
                </Grid.Resources>
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup Name="CommonStates">
                    <VisualState Name="Normal" />
                    <VisualState Name="Disabled">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="PART_DisabledVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1">
                  <Border CornerRadius="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                    <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                      </Grid.ColumnDefinitions>
                      <Grid.Resources>
                        <!-- Start: Previous button template -->
                        <ControlTemplate x:Key="Ö" TargetType="Button">
                          <Grid Cursor="Hand">
                            <VisualStateManager.VisualStateGroups>
                              <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                  <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{DynamicResource Orc.Colors.AccentColor60}" Duration="0" />
                                  </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                  <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Opacity)" To=".5" Duration="0" />
                                  </Storyboard>
                                </VisualState>
                              </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle Fill="{DynamicResource Orc.Brushes.Control.Default.Background}" Stretch="Fill" Opacity="1" />
                            <Grid>
                              <Path x:Name="path" Margin="14,-6,0,0" Height="10" Width="6" VerticalAlignment="Center" HorizontalAlignment="Left" Stretch="Fill" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z">
                                <Path.Fill>
                                  <SolidColorBrush Color="{DynamicResource Orc.Colors.Foreground}" />
                                </Path.Fill>
                              </Path>
                            </Grid>
                          </Grid>
                        </ControlTemplate>
                        <!-- End: Previous button template -->
                        <!-- Start: Next button template -->
                        <ControlTemplate x:Key="×" TargetType="Button">
                          <Grid Cursor="Hand">
                            <VisualStateManager.VisualStateGroups>
                              <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                  <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="{DynamicResource Orc.Colors.AccentColor60}" Duration="0" />
                                  </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                  <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Opacity)" To=".5" Duration="0" />
                                  </Storyboard>
                                </VisualState>
                              </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle Fill="{DynamicResource Orc.Brushes.Control.Default.Background}" Stretch="Fill" Opacity="1" />
                            <Grid>
                              <Path x:Name="path" Margin="0,-6,14,0" Height="10" Width="6" VerticalAlignment="Center" HorizontalAlignment="Right" Stretch="Fill" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z">
                                <Path.Fill>
                                  <SolidColorBrush Color="{DynamicResource Orc.Colors.Foreground}" />
                                </Path.Fill>
                              </Path>
                            </Grid>
                          </Grid>
                        </ControlTemplate>
                        <!-- End: Next button template -->
                        <!-- Start: Header button template -->
                        <ControlTemplate x:Key="Ø" TargetType="Button">
                          <Grid Cursor="Hand">
                            <VisualStateManager.VisualStateGroups>
                              <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                  <Storyboard>
                                    <ColorAnimation Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="{DynamicResource Orc.Colors.AccentColor60}" Duration="0" />
                                  </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                  <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                  </Storyboard>
                                </VisualState>
                              </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentPresenter x:Name="buttonContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="1,4,1,9" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                              <TextElement.Foreground>
                                <SolidColorBrush Color="{DynamicResource Orc.Controls.Foreground}" />
                              </TextElement.Foreground>
                            </ContentPresenter>
                          </Grid>
                        </ControlTemplate>
                        <!-- End: Header button template -->
                      </Grid.Resources>
                      <!-- Start: Previous button content -->
                      <Button x:Name="PART_PreviousButton" Grid.Row="0" Grid.Column="0" Template="{StaticResource Ö}" Height="20" Width="28" HorizontalAlignment="Left" Focusable="False" />
                      <!-- End: Previous button content -->
                      <!-- Start: Header button content -->
                      <Button x:Name="PART_HeaderButton" Grid.Row="0" Grid.Column="1" Template="{StaticResource Ø}" HorizontalAlignment="Center" VerticalAlignment="Center" FontWeight="Bold" FontSize="10.5" Focusable="False" />
                      <!-- End: Header button content -->
                      <!-- Start: Next button content -->
                      <Button x:Name="PART_NextButton" Grid.Row="0" Grid.Column="2" Height="20" Width="28" HorizontalAlignment="Right" Template="{StaticResource ×}" Focusable="False" />
                      <!-- End: Next button content -->
                      <!-- Start: Month Content Grid -->
                      <Grid x:Name="PART_MonthView" Grid.Row="1" Grid.ColumnSpan="3" Visibility="Visible" Margin="6,-1,6,6" HorizontalAlignment="Center">
                        <Grid.RowDefinitions>
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                      </Grid>
                      <!-- End: Month Content Grid -->
                      <!-- End: Year Content Grid -->
                      <Grid x:Name="PART_YearView" Grid.Row="1" Grid.ColumnSpan="3" Visibility="Hidden" Margin="6,-3,7,6" HorizontalAlignment="Center">
                        <Grid.RowDefinitions>
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                      </Grid>
                      <!-- End: Year Content Grid -->
                    </Grid>
                  </Border>
                </Border>
                <Rectangle x:Name="PART_DisabledVisual" Opacity="0" Visibility="Collapsed" Stretch="Fill" StrokeThickness="1" RadiusX="2" RadiusY="2" Stroke="{StaticResource Õ}" Fill="{StaticResource Õ}" />
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="PART_DisabledVisual" Property="Visibility" Value="Visible" />
                </Trigger>
                <DataTrigger Value="Year">
                  <DataTrigger.Binding>
                    <Binding Path="DisplayMode">
                      <Binding.RelativeSource>
                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type Calendar}" />
                      </Binding.RelativeSource>
                    </Binding>
                  </DataTrigger.Binding>
                  <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                  <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                </DataTrigger>
                <DataTrigger Value="Decade">
                  <DataTrigger.Binding>
                    <Binding Path="DisplayMode">
                      <Binding.RelativeSource>
                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type Calendar}" />
                      </Binding.RelativeSource>
                    </Binding>
                  </DataTrigger.Binding>
                  <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                  <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                </DataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <!--CalendarDayButton-->
      <Style x:Key="CalendarDayButtonStyle" TargetType="CalendarDayButton">
        <Setter Property="MinWidth" Value="5" />
        <Setter Property="MinHeight" Value="5" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="CalendarDayButton">
              <Grid>
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup Name="CommonStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0:0:0.1" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Normal" />
                    <VisualState Name="MouseOver">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0" />
                      </Storyboard>
                    </VisualState>
                    <VisualState Name="Pressed">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0" />
                      </Storyboard>
                    </VisualState>
                    <VisualState Name="Disabled">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                        <DoubleAnimation Storyboard.TargetName="NormalText" Storyboard.TargetProperty="Opacity" To=".35" Duration="0" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup Name="SelectionStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Unselected" />
                    <VisualState Name="Selected">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup Name="CalendarButtonFocusStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="CalendarButtonFocused">
                      <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                          <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                              <Visibility>Visible</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                          </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState Name="CalendarButtonUnfocused">
                      <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                          <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                              <Visibility>Collapsed</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                          </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup Name="ActiveStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Active" />
                    <VisualState Name="Inactive">
                      <Storyboard>
                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="{DynamicResource Orc.Colors.Control.Disabled.Border}" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup Name="DayStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="RegularDay" />
                    <VisualState Name="Today">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="{DynamicResource Orc.Colors.Foreground}" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup Name="BlackoutDayStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="NormalDay" />
                    <VisualState Name="BlackoutDay">
                      <Storyboard>
                        <DoubleAnimation Duration="0" Storyboard.TargetName="Blackout" Storyboard.TargetProperty="Opacity" To=".2" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Rectangle x:Name="TodayBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
                <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" />
                <Rectangle x:Name="HighlightBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{DynamicResource Orc.Brushes.Control.Highlighted.Background}" />
                <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="5,1,5,1">
                  <TextElement.Foreground>
                    <SolidColorBrush Color="{DynamicResource Orc.Controls.Foreground}" />
                  </TextElement.Foreground>
                </ContentPresenter>
                <Path x:Name="Blackout" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" Fill="{DynamicResource Orc.Brushes.Control.Default.Foreground}" Stretch="Fill" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z" />
                <Rectangle x:Name="DayButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <!--Calendar Button-->
      <Style x:Key="CalendarButtonStyle" TargetType="CalendarButton">
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
        <Setter Property="MinWidth" Value="40" />
        <Setter Property="MinHeight" Value="42" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="CalendarButton">
              <Grid>
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup Name="CommonStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0:0:0.1" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Normal" />
                    <VisualState Name="MouseOver">
                      <Storyboard>
                        <DoubleAnimation Duration="0" Storyboard.TargetName="MouseOverBackground" Storyboard.TargetProperty="Opacity" To="1" />
                      </Storyboard>
                    </VisualState>
                    <VisualState Name="Pressed">
                      <Storyboard>
                        <DoubleAnimation Duration="0" Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup Name="SelectionStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Unselected" />
                    <VisualState Name="Selected">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup Name="ActiveStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="Active" />
                    <VisualState Name="Inactive">
                      <Storyboard>
                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="{DynamicResource Orc.Colors.Control.Disabled.Border}" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup Name="CalendarButtonFocusStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState Name="CalendarButtonFocused">
                      <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                          <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                              <Visibility>Visible</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                          </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState Name="CalendarButtonUnfocused">
                      <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                          <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                              <Visibility>Collapsed</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                          </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
                <Rectangle x:Name="MouseOverBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
                <Rectangle x:Name="PressedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{DynamicResource Orc.Brushes.Control.Pressed.Background}" />
                <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="1,0,1,1">
                  <TextElement.Foreground>
                    <SolidColorBrush Color="{DynamicResource Orc.Colors.Foreground}" />
                  </TextElement.Foreground>
                </ContentPresenter>
                <Rectangle x:Name="CalendarButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsFocused" Value="True">
                  <Setter TargetName="CalendarButtonFocusVisual" Property="Visibility" Value="Visible" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
    <Setter Property="CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}" />
    <Setter Property="CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}" />
    <Setter Property="CalendarItemStyle" Value="{StaticResource CalendarItemStyle}" />
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Calendar">
          <StackPanel Name="PART_Root" HorizontalAlignment="Center">
            <CalendarItem Name="PART_CalendarItem" Style="{TemplateBinding CalendarItemStyle}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.Control">
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
    <Setter Property="Control.Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
  </Style>
  <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <!--ColumnHeaderGripperStyle-->
      <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <!--ColmnHeaderStyle-->
      <Style x:Key="ColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Padding" Value="3" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
              <Grid x:Name="ContainerGrid" Background="{DynamicResource Orc.Brushes.Control.Default.Background}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border x:Name="BackgroundBorder" BorderThickness="0 0 1 1" Height="28" Grid.ColumnSpan="2" Background="{DynamicResource Orc.Brushes.Control.Default.Background}" />
                <ContentPresenter Margin="3 0 3 0" VerticalAlignment="Center" />
                <Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" Stretch="Fill" Grid.Column="1" Width="8" Height="6" Fill="{DynamicResource Orc.Brushes.Control.Default.Foreground}" Margin="0,2,6,0" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.4" />
                <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
                <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="SortDirection" Value="{x:Null}">
                  <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
                  <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="Transparent" />
                </Trigger>
                <MultiTrigger>
                  <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="SortDirection" Value="{x:Null}" />
                  </MultiTrigger.Conditions>
                  <Setter Property="Background" TargetName="BackgroundBorder" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
                  <Setter Property="BorderBrush" TargetName="BackgroundBorder" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
                  <Setter Property="Background" TargetName="ContainerGrid" Value="Transparent" />
                </MultiTrigger>
                <Trigger Property="SortDirection" Value="Ascending">
                  <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                  <Setter TargetName="SortArrow" Property="RenderTransform">
                    <Setter.Value>
                      <RotateTransform Angle="180" />
                    </Setter.Value>
                  </Setter>
                </Trigger>
                <Trigger Property="SortDirection" Value="Descending">
                  <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="DisplayIndex" Value="0">
                  <Setter Property="Visibility" Value="Collapsed" TargetName="PART_LeftHeaderGripper" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="CellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Padding" Value="3" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type DataGridCell}">
              <Grid Background="{TemplateBinding Background}">
                <ContentPresenter Margin="{TemplateBinding Padding}" />
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="DataGridCell.IsSelected" Value="True">
            <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
            <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
          </Trigger>
          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="IsSelected" Value="True" />
              <Condition Property="IsFocused" Value="True" />
            </MultiTrigger.Conditions>
            <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
            <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
          </MultiTrigger>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
            <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
          </Trigger>
          <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
            <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
    <Setter Property="RowBackground" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
    <Setter Property="AlternatingRowBackground" Value="{DynamicResource GrayBrush10}" />
    <Setter Property="ColumnHeaderStyle" Value="{StaticResource ColumnHeaderStyle}" />
    <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
    <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
    <Setter Property="CellStyle" Value="{StaticResource CellStyle}" />
  </Style>
  <Style x:Key="Orc.Styles.Control.Outside.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="{DynamicResource Orc.Brushes.Control.Default.Foreground}" StrokeThickness="1" StrokeDashArray="1 2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.Control.Inside.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource Orc.Brushes.Control.Default.Foreground}" StrokeThickness="1" StrokeDashArray="1 2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.GroupBox" TargetType="{x:Type GroupBox}">
    <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <ControlTemplate.Resources>
            <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
          </ControlTemplate.Resources>
          <Grid SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="6" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="6" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="6" />
            </Grid.RowDefinitions>
            <Border BorderBrush="{DynamicResource Orc.Brushes.White}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3">
              <Border.OpacityMask>
                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                  <Binding ElementName="Header" Path="ActualWidth" />
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
              </Border.OpacityMask>
              <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            </Border>
            <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
              <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <ContentPresenter Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.Label" TargetType="{x:Type Label}">
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Text}" />
  </Style>
  <Style x:Key="Orc.Styles.ListBox" TargetType="{x:Type ListBox}" BasedOn="{StaticResource Orc.Styles.Control}" />
  <Style x:Key="Orc.Styles.ListBoxItem" TargetType="{x:Type ListBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource Orc.Styles.Control.Inside.FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
              <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False" />
                <Condition Property="IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.SelectionInactive.Background}" />
              <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.SelectionInactive.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True" />
                <Condition Property="IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
              <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Border}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
    <Setter Property="Width" Value="18" />
    <Setter Property="Background">
      <Setter.Value>
        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
          <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
              <GradientStop Color="{DynamicResource Orc.Colors.AccentColor20}" Offset="0.0" />
              <GradientStop Color="{DynamicResource Orc.Colors.AccentColor40}" Offset="1.0" />
            </GradientStopCollection>
          </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Padding}" Background="Transparent">
            <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderBrush">
      <Setter.Value>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
          <GradientStop Color="Black" Offset="0" />
          <GradientStop Color="White" Offset="1" />
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="HeaderBorder">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Orc.Colors.AccentColor40}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="HeaderBorder" BorderThickness="0,1,0,1" Padding="2,0,2,0">
              <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                  <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                      <GradientStop Color="{DynamicResource Orc.Colors.AccentColor40}" Offset="0.0" />
                      <GradientStop Color="{DynamicResource Orc.Colors.AccentColor}" Offset="1.0" />
                    </GradientStopCollection>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
              </Border.BorderBrush>
              <Border.Background>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                  <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                      <GradientStop Color="{DynamicResource Orc.Colors.AccentColor40}" Offset="0.0" />
                      <GradientStop Color="{DynamicResource Orc.Colors.AccentColor60}" Offset="1.0" />
                    </GradientStopCollection>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
              </Border.Background>
              <ContentPresenter x:Name="HeaderContent" Margin="0,0,0,1" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,-9,0" Style="{StaticResource GridViewColumnHeaderGripper}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Role" Value="Floating">
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
              <Canvas Name="PART_FloatingHeaderCanvas">
                <Rectangle Fill="#60000000" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" />
              </Canvas>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Role" Value="Padding">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
              <Border Name="HeaderBorder" BorderThickness="0,1,0,1" Background="{DynamicResource Orc.Brushes.AccentColor40}">
                <Border.BorderBrush>
                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                      <GradientStopCollection>
                        <GradientStop Color="{DynamicResource Orc.Colors.AccentColor40}" Offset="0.0" />
                        <GradientStop Color="{DynamicResource Orc.Colors.AccentColor}" Offset="1.0" />
                      </GradientStopCollection>
                    </LinearGradientBrush.GradientStops>
                  </LinearGradientBrush>
                </Border.BorderBrush>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Orc.Styles.ListView" TargetType="{x:Type ListView}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border Name="Border" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="Border" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.ListViewItem" TargetType="{x:Type ListViewItem}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Padding" Value="4,1" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource Orc.Styles.Control.Inside.FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <Grid>
              <GridViewRowPresenter x:Name="GridViewRowPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding RelativeSource={RelativeSource FindAncestor,&#xD;&#xA;                                                    AncestorType={x:Type ListView}}, Path=View.Columns, Converter={catel:CollectionToCollapsingVisibilityConverter}}" />
              <ContentPresenter x:Name="ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding RelativeSource={RelativeSource FindAncestor,&#xD;&#xA;                                                    AncestorType={x:Type ListView}}, Path=View.Columns, Converter={catel:CollectionToCollapsingVisibilityConverter SupportInversionUsingCommandParameter=True}, ConverterParameter=True}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="Border" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
              <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False" />
                <Condition Property="IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="Border" Value="{DynamicResource Orc.Brushes.Control.SelectionInactive.Background}" />
              <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource Orc.Brushes.Control.SelectionInactive.Border}" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True" />
                <Condition Property="IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="Border" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
              <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Border}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="TextElement.Foreground" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!--<Style.Resources>
            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="Padding" Value="4" />
            </Style>
        </Style.Resources>-->
  </Style>
  <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    <Grid SnapsToDevicePixels="true">
      <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
      <Rectangle x:Name="InnerBorder" Margin="1" />
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
          <ColumnDefinition Width="17" />
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Content" Grid.Column="0" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <TextBlock Grid.Column="1" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" />
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
        <Setter Property="TextBlock.Foreground" TargetName="Content" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
    <Setter Property="ClickMode" Value="Hover" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <DockPanel x:Name="DPButton" Background="{DynamicResource Orc.Brushes.Control.Default.Background}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="ContentContainer" HorizontalAlignment="Center" Margin="2,0,2,5" VerticalAlignment="Center" />
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" TargetName="DPButton" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{StaticResource Orc.Styles.Control}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Border Grid.Column="0" Grid.Row="1">
              <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}" />
            </Border>
            <RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
              <RepeatButton.Visibility>
                <MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path x:Name="UpArrow" Data="{StaticResource MenuScrollUpArrowGeometry}" Fill="{TemplateBinding Foreground}" />
            </RepeatButton>
            <RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
              <RepeatButton.Visibility>
                <MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path x:Name="DownArrow" Data="{StaticResource MenuScrollDownArrowGeometry}" Fill="{TemplateBinding Foreground}" />
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    <Grid SnapsToDevicePixels="true">
      <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" />
      <ContentPresenter x:Name="Content" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
      <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-1">
        <Border x:Name="Shdw" Background="Transparent">
          <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource Orc.Brushes.Control.Default.Border}" BorderThickness="1" Background="{DynamicResource Orc.Brushes.Control.Default.Background}">
            <ScrollViewer x:Name="SubMenuScrollViewer" Margin="1,0" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
              <Grid RenderOptions.ClearTypeHint="Enabled">
                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle x:Name="OpaqueRect" Fill="{DynamicResource Orc.Brushes.Control.Default.Background}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}" />
                </Canvas>
                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
              </Grid>
            </ScrollViewer>
          </Border>
        </Border>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
      </Trigger>
      <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
        <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
        <Setter Property="Background" TargetName="Shdw" Value="#71000000" />
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource Orc.Brushes.Control.Pressed.Background}" />
        <Setter Property="TextBlock.Foreground" TargetName="Content" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource Orc.Brushes.Control.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsSubmenuOpen" Value="true">
        <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource Orc.Brushes.Control.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
      </Trigger>
      <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
        <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}" />
        <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    <Grid SnapsToDevicePixels="true">
      <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" />
      <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource Orc.Brushes.Control.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    <Grid SnapsToDevicePixels="true">
      <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
          <ColumnDefinition Width="17" />
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Content" Grid.Column="0" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <TextBlock Grid.Column="1" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" Visibility="Collapsed" />
        <Path x:Name="RightArrowPath" Grid.Column="2" Data="{StaticResource RightArrow}" Fill="{DynamicResource Orc.Brushes.Control.Foreground}" Margin="4,0,0,0" VerticalAlignment="Center" />
      </Grid>
      <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
        <Border x:Name="Shdw" Background="Transparent">
          <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource Orc.Brushes.Control.Default.Border}" BorderThickness="1" Background="{DynamicResource Orc.Brushes.Control.Default.Background}">
            <ScrollViewer x:Name="SubMenuScrollViewer" Margin="1,0" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
              <Grid RenderOptions.ClearTypeHint="Enabled">
                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                  <Rectangle x:Name="OpaqueRect" Fill="{DynamicResource Orc.Brushes.Control.Default.Background}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}" />
                </Canvas>
                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
              </Grid>
            </ScrollViewer>
          </Border>
        </Border>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
      </Trigger>
      <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
        <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
        <Setter Property="Background" TargetName="Shdw" Value="#71000000" />
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Fill" TargetName="Bg" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
        <Setter Property="TextBlock.Foreground" TargetName="Content" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
        <Setter Property="Fill" TargetName="RightArrowPath" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
      </Trigger>
      <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
        <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}" />
        <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Orc.Styles.MenuItem" TargetType="{x:Type MenuItem}">
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
    <Setter Property="ScrollViewer.PanningMode" Value="Both" />
    <Setter Property="MinHeight" Value="26" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuItem">
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Grid Margin="3,2,3,2" SnapsToDevicePixels="true" UseLayoutRounding="False">
            <Rectangle Fill="{DynamicResource Orc.Brushes.Control.SelectionInactive.Border}" Height="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.ProgressBar" TargetType="{x:Type ProgressBar}">
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.AccentColor}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid x:Name="TemplateRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Indeterminate">
                  <Storyboard RepeatBehavior="Forever">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                      <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                      <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                      <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                    </DoubleAnimationUsingKeyFrames>
                    <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                      <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                      <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                      <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                    </PointAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
            <Rectangle x:Name="PART_Track" />
            <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
              <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
              <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                <Rectangle.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform />
                    <SkewTransform />
                    <RotateTransform />
                    <TranslateTransform />
                  </TransformGroup>
                </Rectangle.RenderTransform>
              </Rectangle>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsIndeterminate" Value="true">
              <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.RadioButton" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource Orc.Styles.Control.Outside.FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="Transparent" SnapsToDevicePixels="true" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <BulletDecorator.Bullet>
              <Grid>
                <Border x:Name="Chrome" Height="14" Width="14" CornerRadius="100" BorderThickness="0" Background="{DynamicResource Orc.Brushes.Control.Background}" />
                <Border x:Name="RadioButtonBorder" Height="14" Width="14" CornerRadius="100" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                  <Ellipse x:Name="RadioMark" Margin="3" Fill="{DynamicResource Orc.Brushes.AccentColor}" Width="6" Height="6" />
                </Border>
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="RadioMark" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="HasContent" Value="true">
        <Setter Property="Padding" Value="4,0,0,0" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Border x:Name="Border" Background="Transparent" Margin="1" CornerRadius="2" BorderThickness="0">
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                      <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                          <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Orc.Colors.AccentColor20}" />
                        </ColorAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                      <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                          <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Orc.Colors.AccentColor40}" />
                        </ColorAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                      <Storyboard>
                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                          <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Orc.Colors.AccentColor20}" />
                        </ColorAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}">
                  <Path.Fill>
                    <SolidColorBrush Color="{DynamicResource Gray7}" />
                  </Path.Fill>
                </Path>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Border Background="Transparent" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Margin" Value="1 0 1 0" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Border Background="White">
                <Border x:Name="Chrome" Background="{TemplateBinding Background}" />
              </Border>
              <ControlTemplate.Triggers>
                <Trigger SourceName="Chrome" Property="IsMouseOver" Value="True">
                  <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource Orc.Brushes.GrayBrush3}" />
                </Trigger>
                <Trigger Property="IsDragging" Value="True">
                  <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource Orc.Brushes.GrayBrush2}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition MaxHeight="18" />
            <RowDefinition Height="0.00001*" />
            <RowDefinition MaxHeight="18" />
          </Grid.RowDefinitions>
          <Border Grid.RowSpan="3" Background="{DynamicResource Orc.Brushes.GrayBrush10}" />
          <RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
          <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
            <Track.DecreaseRepeatButton>
              <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
              <Thumb Style="{StaticResource ScrollBarThumb}" Background="{DynamicResource Orc.Brushes.GrayBrush7}" Margin="1,0,1,0" />
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
              <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
            </Track.IncreaseRepeatButton>
          </Track>
          <RepeatButton Grid.Row="2" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
      </ControlTemplate>
      <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition MaxWidth="18" />
            <ColumnDefinition Width="0.00001*" />
            <ColumnDefinition MaxWidth="18" />
          </Grid.ColumnDefinitions>
          <Border Grid.ColumnSpan="3" Background="{DynamicResource Orc.Brushes.GrayBrush10}" />
          <RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
          <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
            <Track.DecreaseRepeatButton>
              <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
              <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" Background="{DynamicResource Orc.Brushes.GrayBrush7}" />
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
              <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
            </Track.IncreaseRepeatButton>
          </Track>
          <RepeatButton Grid.Column="2" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" />
        </Grid>
      </ControlTemplate>
    </Style.Resources>
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="18" />
        <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TabItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="3,3,3,1" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.TabItem" TargetType="{x:Type TabItem}" BasedOn="{StaticResource Orc.Styles.Control}">
    <!--<Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />-->
    <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}" />
    <Setter Property="Padding" Value="6,1,6,1" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid SnapsToDevicePixels="true">
            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
              <ContentPresenter x:Name="Content" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="Panel.ZIndex" Value="1" />
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
              <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Border}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="false" />
                <Condition Property="IsMouseOver" Value="true" />
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
            </MultiTrigger>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter Property="BorderThickness" TargetName="Bd" Value="1,0,1,1" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter Property="BorderThickness" TargetName="Bd" Value="1,1,0,1" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter Property="BorderThickness" TargetName="Bd" Value="0,1,1,1" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true" />
                <Condition Property="TabStripPlacement" Value="Top" />
              </MultiTrigger.Conditions>
              <Setter Property="Margin" Value="-2,-2,-2,-1" />
              <Setter Property="Margin" TargetName="Content" Value="0,0,0,1" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true" />
                <Condition Property="TabStripPlacement" Value="Bottom" />
              </MultiTrigger.Conditions>
              <Setter Property="Margin" Value="-2,-1,-2,-2" />
              <Setter Property="Margin" TargetName="Content" Value="0,1,0,0" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true" />
                <Condition Property="TabStripPlacement" Value="Left" />
              </MultiTrigger.Conditions>
              <Setter Property="Margin" Value="-2,-2,-1,-2" />
              <Setter Property="Margin" TargetName="Content" Value="0,0,1,0" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true" />
                <Condition Property="TabStripPlacement" Value="Right" />
              </MultiTrigger.Conditions>
              <Setter Property="Margin" Value="-1,-2,-2,-2" />
              <Setter Property="Margin" TargetName="Content" Value="1,0,0,0" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
              <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.TabControl" TargetType="{x:Type TabControl}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="Padding" Value="4,4,4,4" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Border}" />
    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0" />
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto" />
              <RowDefinition x:Name="RowDefinition1" Height="*" />
            </Grid.RowDefinitions>
            <TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
            <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
              <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1" />
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
              <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0" />
              <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
              <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
              <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
              <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2" />
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
              <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
              <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1" />
              <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
              <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
              <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
              <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
              <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
              <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.TextBlock" TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Text}" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Text.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Orc.Styles.TextBoxBase" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
    <Setter Property="Control.AllowDrop" Value="true" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Control.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="TextBoxBase.SelectionBrush" Value="{DynamicResource Orc.Styles.TextBox.Selection.Highlight}" />
    <Style.Triggers>
      <Trigger Property="Control.IsEnabled" Value="false">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
        <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
        <Setter Property="Control.Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
      </Trigger>
      <Trigger Property="Control.IsMouseOver" Value="true">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
      </Trigger>
      <Trigger Property="Control.IsKeyboardFocused" Value="true">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Focus.Border}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="true" />
          <Condition Property="TextBoxBase.IsSelectionActive" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="TextBoxBase.SelectionBrush" Value="{DynamicResource Orc.Styles.TextBox.Selection.HighlightInactive}" />
      </MultiTrigger>
      <Trigger Property="TextBoxBase.VerticalAlignment" Value="Stretch">
        <Setter Property="TextBoxBase.Height" Value="Auto" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Orc.Styles.Thumb" TargetType="{x:Type Thumb}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsDragging" Value="true">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.AccentBaseColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.AccentBaseColorBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Orc.Styles.ToolBarTray" TargetType="{x:Type ToolBarTray}">
    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Background}" />
  </Style>
  <Style x:Key="Orc.Styles.ToolBar" TargetType="{x:Type ToolBar}">
    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Background}" />
  </Style>
  <Style x:Key="Orc.Styles.ToolTip" TargetType="ToolTip" BasedOn="{StaticResource Orc.Styles.Control}" />
  <Style x:Key="Orc.Styles.TreeView" TargetType="TreeView" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TreeView">
          <Border Name="Border" CornerRadius="1" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <ScrollViewer Focusable="False" CanContentScroll="False" Padding="4">
              <ItemsPresenter />
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.Window" TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
    <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Default.Background}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Grid Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!-- This ContentPresenter automatically binds to the Content of the Window -->
            <AdornerDecorator>
              <ContentPresenter />
            </AdornerDecorator>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.DataWindowStyle" TargetType="{x:Type Window}" BasedOn="{StaticResource Orc.Styles.Window}">
    <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
  </Style>
  <Style TargetType="{x:Type catel:DataWindow}" BasedOn="{StaticResource Orc.Styles.DataWindowStyle}" />
  <Style x:Key="DefaultInfoBarMessageControlStyle" TargetType="{x:Type catel:InfoBarMessageControl}" BasedOn="{StaticResource Orc.Styles.InfoBarMessageControl}">
    <Style.Resources>
      <SolidColorBrush x:Key="InfoBarMessageWarningTextColorBrush" Color="DarkOrange" />
      <SolidColorBrush x:Key="InfoBarMessageErrorTextBackgroundBrush" Color="#FFFFF0" />
    </Style.Resources>
  </Style>
  <Style x:Key="{x:Type TextBoxBase}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}" />
  <Style x:Key="{x:Type Control}" BasedOn="{StaticResource Orc.Styles.Control}" />
  <Style x:Key="DefaultCalendarStyle" TargetType="{x:Type Calendar}" BasedOn="{StaticResource Orc.Styles.Calendar}" />
  <Style x:Key="DefaultListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource Orc.Styles.ListBoxItem}" />
  <Style x:Key="DefaultListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource Orc.Styles.ListViewItem}" />
  <Style x:Key="DefaultMenuItemStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource Orc.Styles.MenuItem}" />
  <Style x:Key="DefaultTabItemStyle" TargetType="{x:Type TabItem}" BasedOn="{StaticResource Orc.Styles.TabItem}" />
  <Style x:Key="DefaultToolBarTrayStyle" TargetType="{x:Type ToolBarTray}" BasedOn="{StaticResource Orc.Styles.ToolBarTray}">
    <!--<Setter Property="Margin" Value="{DynamicResource Margin.Default}" />-->
  </Style>
  <Style x:Key="DefaultToolBarStyle" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource Orc.Styles.ToolBar}">
    <!--<Setter Property="Margin" Value="{DynamicResource Margin.Default}" />-->
  </Style>
  <Style x:Key="DefaultWindowStyle" TargetType="{x:Type Window}" BasedOn="{StaticResource Orc.Styles.Window}" />
  <Thickness x:Key="Margin.Default" Left="{StaticResource MarginSize.Default}" Top="{StaticResource MarginSize.Default}" Right="{StaticResource MarginSize.Default}" Bottom="{StaticResource MarginSize.Default}" />
  <Thickness x:Key="Margin.Button" Left="{StaticResource MarginSize.Button.X}" Top="{StaticResource MarginSize.Button.Y}" Right="{StaticResource MarginSize.Button.X}" Bottom="{StaticResource MarginSize.Button.Y}" />
  <Thickness x:Key="Margin.Button.LeftAligned" Left="0" Top="{StaticResource MarginSize.Button.Y}" Right="{StaticResource MarginSize.Button.X}" Bottom="0" />
  <Thickness x:Key="Margin.Button.RightAligned" Left="{StaticResource MarginSize.Button.X}" Top="{StaticResource MarginSize.Button.Y}" Right="0" Bottom="0" />
  <Thickness x:Key="Margin.CheckBox" Left="{StaticResource MarginSize.CheckBox.X}" Top="{StaticResource MarginSize.CheckBox.Y}" Right="{StaticResource MarginSize.CheckBox.X}" Bottom="{StaticResource MarginSize.CheckBox.Y}" />
  <Thickness x:Key="Margin.GroupBox" Left="{StaticResource MarginSize.GroupBox.X}" Top="{StaticResource MarginSize.GroupBox.Y}" Right="{StaticResource MarginSize.GroupBox.X}" Bottom="{StaticResource MarginSize.GroupBox.Y}" />
  <Thickness x:Key="Margin.Label" Left="{StaticResource MarginSize.Label.X}" Top="{StaticResource MarginSize.Label.Y}" Right="{StaticResource MarginSize.Label.X}" Bottom="{StaticResource MarginSize.Label.Y}" />
  <Thickness x:Key="Margin.RadioButton" Left="{StaticResource MarginSize.RadioButton.X}" Top="{StaticResource MarginSize.RadioButton.Y}" Right="{StaticResource MarginSize.RadioButton.X}" Bottom="{StaticResource MarginSize.RadioButton.Y}" />
  <Thickness x:Key="Margin.Slider" Left="{StaticResource MarginSize.Slider.X}" Top="{StaticResource MarginSize.Slider.Y}" Right="{StaticResource MarginSize.Slider.X}" Bottom="{StaticResource MarginSize.Slider.Y}" />
  <Thickness x:Key="Margin.TextBlock" Left="{StaticResource MarginSize.TextBlock.X}" Top="{StaticResource MarginSize.TextBlock.Y}" Right="{StaticResource MarginSize.TextBlock.X}" Bottom="{StaticResource MarginSize.TextBlock.Y}" />
  <Thickness x:Key="Margin.TextBox" Left="{StaticResource MarginSize.TextBox.X}" Top="{StaticResource MarginSize.TextBox.Y}" Right="{StaticResource MarginSize.TextBox.X}" Bottom="{StaticResource MarginSize.TextBox.Y}" />
  <Thickness x:Key="Padding.Default" Left="{StaticResource PaddingSize.Default}" Top="{StaticResource PaddingSize.Default}" Right="{StaticResource PaddingSize.Default}" Bottom="{StaticResource PaddingSize.Default}" />
  <Thickness x:Key="Padding.Label" Left="{StaticResource PaddingSize.Label.X}" Top="{StaticResource PaddingSize.Label.Y}" Right="{StaticResource PaddingSize.Label.X}" Bottom="{StaticResource PaddingSize.Label.Y}" />
  <Thickness x:Key="Padding.TextBox" Left="{StaticResource PaddingSize.TextBox.X}" Top="{StaticResource PaddingSize.TextBox.Y}" Right="{StaticResource PaddingSize.TextBox.X}" Bottom="{StaticResource PaddingSize.TextBox.Y}" />
  <Thickness x:Key="Padding.Combobox" Left="{StaticResource PaddingSize.Combobox.X}" Top="{StaticResource PaddingSize.Combobox.Y}" Right="{StaticResource PaddingSize.Combobox.X}" Bottom="{StaticResource PaddingSize.Combobox.Y}" />
  <Style x:Key="{x:Type controls:ThemeImage}" TargetType="{x:Type controls:ThemeImage}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type controls:ThemeImage}">
          <Image x:Name="PART_Image" Stretch="{TemplateBinding Stretch}" StretchDirection="{TemplateBinding StretchDirection}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.ButtonBase" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="Control.FocusVisualStyle" Value="{StaticResource Orc.Styles.Control.Inside.FocusVisual}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="Chrome" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <ContentPresenter.Resources>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{x:Null}" />
              </ContentPresenter.Resources>
            </ContentPresenter>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Control.IsMouseOver" Value="True">
              <Setter TargetName="Chrome" Property="Control.Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
              <Setter TargetName="Chrome" Property="Control.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
              <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter TargetName="Chrome" Property="ButtonBase.Background" Value="{DynamicResource Orc.Brushes.Control.Pressed.Background}" />
              <Setter TargetName="Chrome" Property="ButtonBase.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Pressed.Border}" />
              <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.Pressed.Foreground}" />
            </Trigger>
            <Trigger Property="Control.IsEnabled" Value="False">
              <Setter TargetName="Chrome" Property="Control.Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
              <Setter TargetName="Chrome" Property="Control.BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
              <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Checked.Background}" />
              <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource Orc.Brushes.AccentColor20}" />
              <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.Checked.Foreground}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="True" />
                <Condition Property="ToggleButton.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Checked.Background}" />
              <Setter TargetName="Chrome" Property="Background" Value="{DynamicResource Orc.Brushes.AccentColor40}" />
              <Setter Property="Control.Foreground" Value="{DynamicResource Orc.Brushes.Control.CheckedMouseOver.Foreground}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.CheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource Orc.Styles.Control.Outside.FocusVisual}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <BulletDecorator Background="Transparent" SnapsToDevicePixels="true" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <BulletDecorator.Bullet>
              <Grid x:Name="ChromeGrid" Background="{DynamicResource Orc.Brushes.Control.Background}">
                <Border x:Name="CheckBoxBorder" Height="14" Width="14" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                  <Grid>
                    <Path x:Name="CheckMark" Data="M7.2,5 L5.5,7.16 4.16,6.3 3.5,6.7 5.5,8.4 8.6,5.25 C8.6,5.25 8,4.7 7.22,5" Height="Auto" Width="Auto" Stretch="Fill" Fill="{DynamicResource Orc.Brushes.AccentColor}" Margin="1,1.007,1,1" />
                    <Rectangle x:Name="IndeterminateMark" Fill="{DynamicResource Orc.Brushes.AccentColor}" Margin="2.5,2.5,2,2" Visibility="Collapsed" />
                  </Grid>
                </Border>
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter TargetName="IndeterminateMark" Property="Visibility" Value="Visible" />
              <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="HasContent" Value="true">
        <Setter Property="Padding" Value="4,0,0,0" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Orc.Styles.PasswordBox" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}">
    <Setter Property="PasswordChar" Value="●" />
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
    <Setter Property="SelectionBrush" Value="{DynamicResource Orc.Styles.TextBox.Selection.Highlight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
          <Condition Property="IsSelectionActive" Value="false" />
        </MultiTrigger.Conditions>
        <Setter Property="SelectionBrush" Value="{DynamicResource Orc.Styles.PasswordBox.Selection.HighlightInactive}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Orc.Styles.RepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource Orc.Styles.ButtonBase}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
  </Style>
  <Style x:Key="Orc.Styles.RichTextBox" TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RichTextBox}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.Slider.Thumb" TargetType="{x:Type Thumb}" BasedOn="{StaticResource Orc.Styles.Thumb}">
    <Setter Property="Height" Value="15" />
    <Setter Property="Width" Value="15" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid>
            <Ellipse x:Name="BackEllipse" Width="13" Height="13" Stroke="{DynamicResource Orc.Brushes.White}" Fill="{DynamicResource Orc.Brushes.White}" StrokeThickness="1" />
            <Ellipse x:Name="ThumbEllipse" Width="13" Height="13" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.Slider" TargetType="{x:Type Slider}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource Orc.Styles.Control.Outside.FocusVisual}" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Slider}">
          <Grid VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
            <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" />
            <Border x:Name="TrackBackground" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1" Height="3.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
              <Canvas Margin="-6,-1">
                <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" Stroke="{DynamicResource Orc.Brushes.Control.SelectionActive.Border}" Height="3.0" StrokeThickness="1.0" Visibility="Hidden" />
              </Canvas>
            </Border>
            <Track x:Name="PART_Track" Grid.Row="1">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource Orc.Styles.Slider.RepeatButtonStyle}" />
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource Orc.Styles.Slider.RepeatButtonStyle}" />
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb x:Name="Thumb" Style="{StaticResource Orc.Styles.Slider.Thumb}" />
              </Track.Thumb>
            </Track>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
              <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
              <Setter Property="Style" TargetName="Thumb" Value="{StaticResource Orc.Styles.Slider.Thumb}" />
              <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
              <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
              <Setter Property="Style" TargetName="Thumb" Value="{StaticResource Orc.Styles.Slider.Thumb}" />
              <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
              <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
              <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
              <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter Property="Foreground" TargetName="Thumb" Value="Gray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Slider}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Placement="Left" Visibility="Collapsed" Width="4" />
                <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Placement="Right" Visibility="Collapsed" Width="4" />
                <Border x:Name="TrackBackground" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="3.0">
                  <Canvas Margin="-1,-6">
                    <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" Stroke="{DynamicResource Orc.Brushes.Control.SelectionActive.Border}" StrokeThickness="1.0" Visibility="Hidden" Width="3.0" />
                  </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource Orc.Styles.Slider.RepeatButtonStyle}" />
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource Orc.Styles.Slider.RepeatButtonStyle}" />
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb x:Name="Thumb" Style="{StaticResource Orc.Styles.Slider.Thumb}" />
                  </Track.Thumb>
                </Track>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="TickPlacement" Value="TopLeft">
                  <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                  <Setter Property="Style" TargetName="Thumb" Value="{StaticResource Orc.Styles.Slider.Thumb}" />
                  <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5" />
                </Trigger>
                <Trigger Property="TickPlacement" Value="BottomRight">
                  <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                  <Setter Property="Style" TargetName="Thumb" Value="{StaticResource Orc.Styles.Slider.Thumb}" />
                  <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5" />
                </Trigger>
                <Trigger Property="TickPlacement" Value="Both">
                  <Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
                  <Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
                </Trigger>
                <Trigger Property="IsSelectionRangeEnabled" Value="true">
                  <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible" />
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                  <Setter Property="Foreground" TargetName="Thumb" Value="Gray" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Orc.Styles.TextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Orc.Styles.TextBoxBase}">
    <Setter Property="CaretBrush" Value="{DynamicResource Orc.Brushes.Control.Default.Foreground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Orc.Styles.ToggleButton" BasedOn="{StaticResource Orc.Styles.ButtonBase}" />
  <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate>
              <Border>
                <Rectangle Margin="0,0,0,0" StrokeThickness="5" Stroke="{DynamicResource Orc.Brushes.Control.Default.Foreground}" StrokeDashArray="1 2" Opacity="0" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton" BasedOn="{StaticResource Orc.Styles.ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="ToggleButton">
              <Grid Width="15" Height="13" Background="Transparent">
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                      <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Collapsed">
                          <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Expanded">
                          <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Path x:Name="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="1,1,1,1" Data="M 4 0 L 8 4 L 4 8 Z" Fill="{TemplateBinding Foreground}" />
                <Path x:Name="Expanded" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="1,1,1,1" Data="M 0 4 L 8 4 L 4 8 Z" Visibility="Hidden" Fill="{TemplateBinding Foreground}" />
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
          </Trigger>
          <Trigger Property="IsChecked" Value="True">
            <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Checked.Background}" />
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="1,0,0,0" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19" Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ExpansionStates">
                <VisualState x:Name="Expanded">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Collapsed" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border x:Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Padding="{TemplateBinding Padding}">
              <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="false" />
                <Condition Property="Width" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="false" />
                <Condition Property="Height" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True" />
          <Condition Property="IsFocused" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.SelectionActive.Foreground}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True" />
          <Condition Property="IsFocused" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.SelectionInactive.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.SelectionInactive.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.SelectionInactive.Foreground}" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Orc.Brushes.Control.Disabled.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultThemeImageStyle" TargetType="{x:Type controls:ThemeImage}" BasedOn="{StaticResource {x:Type controls:ThemeImage}}" />
  <Style x:Key="{x:Type ButtonBase}" BasedOn="{StaticResource Orc.Styles.ButtonBase}" />
  <Style x:Key="DefaultCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource Orc.Styles.CheckBox}">
    <Setter Property="Margin" Value="{DynamicResource Margin.CheckBox}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultDataGridStyle" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="DefaultGroupBoxStyle" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource Orc.Styles.GroupBox}">
    <Setter Property="Margin" Value="{DynamicResource Margin.GroupBox}" />
  </Style>
  <Style x:Key="DefaultLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource Orc.Styles.Label}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Label}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.Label}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
  <Style x:Key="DefaultListBoxStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource Orc.Styles.ListBox}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="DefaultListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource Orc.Styles.ListView}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="DefaultPasswordBoxStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource Orc.Styles.PasswordBox}">
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultProgressBarStyle" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource Orc.Styles.ProgressBar}">
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="DefaultRadioButtonStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource Orc.Styles.RadioButton}">
    <Setter Property="Margin" Value="{DynamicResource Margin.RadioButton}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultRepeatButtonStyle" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource Orc.Styles.RepeatButton}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Button}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="UseLayoutRounding" Value="True" />
  </Style>
  <Style x:Key="DefaultRichTextBoxStyle" TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource Orc.Styles.RichTextBox}">
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <!--<Setter Property="VerticalContentAlignment" Value="Center" />-->
    <Setter Property="HorizontalAlignment" Value="Stretch" />
  </Style>
  <Style x:Key="DefaultSliderStyle" TargetType="{x:Type Slider}" BasedOn="{StaticResource Orc.Styles.Slider}">
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Margin" Value="{DynamicResource Margin.Slider}" />
  </Style>
  <Style x:Key="DefaultTabControlStyle" TargetType="{x:Type TabControl}" BasedOn="{StaticResource Orc.Styles.TabControl}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="DefaultTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Orc.Styles.TextBlock}">
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBlock}" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>
  <Style x:Key="DefaultTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Orc.Styles.TextBox}">
    <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
    <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
    <!--<Setter Property="VerticalContentAlignment" Value="Center" />-->
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Orc.Styles.ToggleButton}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Button}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
  </Style>
  <Style x:Key="DefaultToolTipStyle" TargetType="{x:Type ToolTip}" BasedOn="{StaticResource Orc.Styles.ToolTip}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="DefaultTreeViewStyle" TargetType="{x:Type TreeView}" BasedOn="{StaticResource Orc.Styles.TreeView}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
  </Style>
  <Style x:Key="Orc.Styles.Button" TargetType="{x:Type Button}" BasedOn="{StaticResource Orc.Styles.ButtonBase}" />
  <Style x:Key="Orc.Styles.ComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource Orc.Styles.Control}">
    <Style.Resources>
      <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
      </ControlTemplate>
      <Style x:Key="ComboboxToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Orc.Styles.Control}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <Border x:Name="Chrome" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <Grid x:Name="PathGrid" HorizontalAlignment="Right" Width="12">
                  <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center" />
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter Property="Background" TargetName="PathGrid" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Background}" />
                  <Setter Property="BorderBrush" TargetName="Chrome" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Border}" />
                  <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource Orc.Brushes.Control.MouseOver.Foreground}" />
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                  <Setter Property="Background" TargetName="PathGrid" Value="{DynamicResource Orc.Brushes.Control.Checked.Background}" />
                  <Setter Property="BorderBrush" TargetName="Chrome" Value="{DynamicResource Orc.Brushes.Control.Checked.Border}" />
                  <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource Orc.Brushes.Control.Checked.Foreground}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
    <Setter Property="FocusVisualStyle" Value="{StaticResource Orc.Styles.Control.Inside.FocusVisual}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <ControlTemplate.Resources>
            <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource Orc.Styles.Control}">
              <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
              <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
              <Setter Property="Padding" Value="3" />
              <Setter Property="BorderBrush" Value="Transparent" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                      <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsHighlighted" Value="true">
                        <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Orc.Brushes.Control.Highlighted.Background}" />
                      </Trigger>
                      <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </ControlTemplate.Resources>
          <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Margin="1" Placement="Bottom" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
              <Border x:Name="Shdw" Background="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                <Border x:Name="DropDownBorder" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Padding="1">
                  <ScrollViewer x:Name="DropDownScrollViewer">
                    <Grid RenderOptions.ClearTypeHint="Enabled">
                      <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                      </Canvas>
                      <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                  </ScrollViewer>
                </Border>
              </Border>
            </Popup>
            <ToggleButton Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Style="{StaticResource ComboboxToggleButton}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ContentPresenter Name="ContentSite" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            <TextBox x:Name="PART_EditableTextBox" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource Orc.Styles.TextBox}" Padding="0" Margin="{TemplateBinding Padding}" Focusable="True" Background="Transparent" Foreground="{TemplateBinding Foreground}" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" Template="{StaticResource ComboBoxTextBox}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
              <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5" />
              <Setter Property="Background" TargetName="Shdw" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource Orc.Brushes.Control.Disabled.Foreground}" />
              <Setter Property="Background" Value="{DynamicResource Orc.Brushes.Control.Disabled.Background}" />
            </Trigger>
            <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
              <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
              <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
              <Setter Property="IsTabStop" Value="false" />
              <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
              <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DataWindowButtonStyle" TargetType="Button" BasedOn="{StaticResource Orc.Styles.Button}">
    <Setter Property="Margin" Value="6, 0, 0, 0" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="MinWidth" Value="100" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="UseLayoutRounding" Value="True" />
  </Style>
  <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource Orc.Styles.Button}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Button}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Grayscale effect when disabled -->
    <!--<Setter Property="Effect">
            <Setter.Value>
                <effects:GrayscaleEffect DesaturationFactor="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, Converter={catel:BooleanToGrayscaleConverter}}" />
            </Setter.Value>
        </Setter>-->
  </Style>
  <Style x:Key="DefaultComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource Orc.Styles.ComboBox}">
    <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
    <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="120" />
    <Setter Property="Padding" Value="{DynamicResource Padding.Combobox}" />
    <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True">
            <Border BorderThickness="1" BorderBrush="Red" Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={catel:BooleanToHidingVisibilityConverter}}">
              <AdornedElementPlaceholder x:Name="placeholder" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- Show errors as tooltip -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={catel:GetFirstValidationErrorConverter}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>